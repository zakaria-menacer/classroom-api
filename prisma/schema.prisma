// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  name        String           @id
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  created_at  DateTime         @default(now())
  updated_at  DateTime?        @updatedAt
  permissions RolePermission[]
  User        User[]

  @@map("roles")
}

model RolePermission {
  role       String @map("role")
  permission String @map("permission")

  rolesRef       Role       @relation(fields: [role], references: [id])
  permissionsRef Permission @relation(fields: [permission], references: [name])

  @@id([role, permission])
  @@map("roles_permissions")
}

model User {
  id          String       @unique
  firstName   String?      @map("first_name")
  lastName    String?      @map("last_name")
  email       String       @id
  mobilePhone String?
  created_at  DateTime     @default(now())
  updated_at  DateTime?    @updatedAt
  active      Boolean      @default(true)
  roleId      String       @map("role_id")
  roleRef     Role         @relation(fields: [roleId], references: [id])
  Classroom   Classroom[]
  Enrollment  Enrollment[]

  @@map("users")
}

model Classroom {
  id          String       @id @default(uuid())
  createdBy   String       @map("created_by")
  name        String
  description String?
  UserRef     User         @relation(fields: [createdBy], references: [id])
  Enrollment  Enrollment[]
  Assignment  Assignment[]

  @@map("classrooms")
}

model Enrollment {
  userId       String    @map("user_id")
  classroomId  String    @map("classroom_id")
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  UserRef      User      @relation(fields: [userId], references: [id])
  ClassroomRef Classroom @relation(fields: [classroomId], references: [id])

  @@id([userId, classroomId])
  @@map("enrollments")
}

model Assignment {
  id             String           @id @default(uuid())
  title          String
  body           String?
  created_at     DateTime         @default(now())
  updated_at     DateTime?        @updatedAt
  classroomId    String           @map("classroom_id")
  maxGrade       Float?
  dueDate        DateTime?
  ClassroomRef   Classroom        @relation(fields: [classroomId], references: [id])
  AssignmentFile AssignmentFile[]

  @@map("assignments")
}

model AssignmentFile {
  id            String     @id
  name          String
  path          String
  assignmentId  String     @map("assignment_id")
  AssignmentRef Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_files")
}
